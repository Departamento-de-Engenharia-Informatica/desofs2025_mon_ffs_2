name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Executa semanalmente aos domingos
  workflow_dispatch: # Permite execução manual do workflow

jobs:
  # Job 1: Análise de Código com CodeQL
  analyze:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./project/AMAPP.API

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]  # Adicione outros idiomas se necessário

    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # config-file: .github/codeql/codeql-config.yml

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Build
      run: |
        dotnet restore
        dotnet build --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: '/language:${{ matrix.language }}'
        output: codeql-results.sarif
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 2: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: amappdb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore
        
      - name: Run tests with coverage
        run: |
          # Executar testes com cobertura
          if [ -f "AMAPP.API.Tests/AMAPP.API.Tests.csproj" ]; then
            echo "Running tests from AMAPP.API.Tests project..."
            dotnet test AMAPP.API.Tests/AMAPP.API.Tests.csproj --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
          elif [ -f "AMAP.API.Tests/AMAP.API.Tests.csproj" ]; then
            echo "Running tests from AMAP.API.Tests project..."
            dotnet test AMAP.API.Tests/AMAP.API.Tests.csproj --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
          elif [ -f "AMAPP.API.sln" ]; then
            echo "Running tests from solution..."
            dotnet test AMAPP.API.sln --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
          else
            echo "Running tests from main project (no separate test project found)..."
            dotnet test --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
          fi
          
          # — Smoke tests
          echo "Executando testes de smoke..."
          mkdir -p ./SmokeTestResults
          echo "Iniciando testes de smoke em $(date)" > ./SmokeTestResults/smoke-report.txt

          # start API in background and remember its PID
          dotnet run --no-build --urls http://localhost:7237 &
          API_PID=$!
          echo "API PID is $API_PID"
          
          echo "Aguardando a API iniciar..."
          sleep 10

          # health endpoint
          echo "Verificando endpoint de saúde..."
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:7237/health)
          echo "Status do endpoint /health: $HEALTH_STATUS" >> ./SmokeTestResults/smoke-report.txt
          if [ "$HEALTH_STATUS" = "200" ]; then
            echo " Health check passou" >> ./SmokeTestResults/smoke-report.txt
          else
            echo " Health check falhou" >> ./SmokeTestResults/smoke-report.txt
          fi

          # swagger endpoint
          echo "Verificando documentação Swagger..."
          SWAGGER_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:7237/swagger/index.html)
          echo "Status do endpoint /swagger: $SWAGGER_STATUS" >> ./SmokeTestResults/smoke-report.txt
          if [ "$SWAGGER_STATUS" = "200" ]; then
            echo " Swagger check passou" >> ./SmokeTestResults/smoke-report.txt
          else
            echo " Swagger check falhou" >> ./SmokeTestResults/smoke-report.txt
          fi
          
          # stop only that API instance
          echo "Parando a API (PID $API_PID)..."
          kill $API_PID || echo "Não foi possível encerrar a API com PID $API_PID"
          
          # Instalar e executar testes de mutação
          echo "====== INICIANDO TESTES DE MUTAÇÃO ======"
          echo "Instalando Stryker para testes de mutação..."
          dotnet tool install -g dotnet-stryker || echo "Stryker já instalado"
          
          echo "Executando testes de mutação em classes críticas..."
          dotnet stryker \
            -p AMAPP.API.csproj \
            --reporter "html" \
            --reporter "progress" \
            --mutation-level Basic \
            --output "MutationReports"
          echo "✅ Testes de mutação concluídos. Relatórios gerados em ./MutationReports"
          ls -la MutationReports || echo "Diretório MutationReports não encontrado"
          
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=amappdb_test;Username=postgres;Password=postgres;"
        continue-on-error: true
        
      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
        with:
          reports: './project/AMAPP.API/TestResults/**/coverage.cobertura.xml'
          targetdir: './project/AMAPP.API/CoverageReport'
          reporttypes: 'HtmlInline;Cobertura;TextSummary'
      
      - name: Upload test results and coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-and-coverage
          path: |
            ./project/AMAPP.API/TestResults/
            ./project/AMAPP.API/CoverageReport/
            ./project/AMAPP.API/SmokeTestResults/
            ./project/AMAPP.API/MutationReports/
            
      - name: Publish for scanning
        run: |
          dotnet publish AMAPP.API.csproj \
            --configuration Release \
            --framework net8.0 \
            --output ./bin/Release/net8.0
  
      - name: Scan .NET build output with Trivy (template mode)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scan-ref: './project/AMAPP.API/bin/Release/net8.0'
          format: template                # ← template mode always writes SARIF
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          scanners: 'vuln,secret,misconfig'
          severity: 'MEDIUM,HIGH,CRITICAL'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'Trivy'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 
  # Job 3: Verificação de Dependências (SCA)
  dependency-check:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: List vulnerable packages
      run: |
        echo "Checking for vulnerable NuGet packages..."
        dotnet list package --vulnerable --include-transitive > vulnerable-packages.txt
        cat vulnerable-packages.txt
      continue-on-error: true
    
    - name: Check for outdated packages
      run: |
        echo "Checking for outdated packages..."
        dotnet list package --outdated > outdated-packages.txt
        cat outdated-packages.txt
      continue-on-error: true
    
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'AMAPP.API'
        path: './project'
        format: 'HTML,JSON'
        out: 'dependency-check-reports'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
      continue-on-error: true
    
    - name: Generate SBOM
      uses: CycloneDX/gh-dotnet-generate-sbom@v1
      continue-on-error: true
      with:
        path: ./project/AMAPP.API/AMAPP.API.csproj
        out: ./project/AMAPP.API

    - name: Normalize SBOM filename
      continue-on-error: true
      run: |
        #!/usr/bin/env bash
        WORKDIR="$GITHUB_WORKSPACE"
        PROJDIR="$WORKDIR/project/AMAPP.API"
        mkdir -p "$PROJDIR"

        # look for bom.xml in either location
        if [[ -f "$WORKDIR/bom.xml" ]]; then
          SRC="$WORKDIR/bom.xml"
        elif [[ -f "$PROJDIR/bom.xml" ]]; then
          SRC="$PROJDIR/bom.xml"
        else
          echo "⚠️ SBOM not found; creating empty placeholder"
          echo '<?xml version="1.0"?><bom></bom>' > "$PROJDIR/sbom.xml"
          exit 0
        fi

        mv "$SRC" "$PROJDIR/sbom.xml"
        echo "✅ SBOM moved to project/AMAPP.API/sbom.xml"
        
    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          ./project/AMAPP.API/vulnerable-packages.txt
          ./project/AMAPP.API/outdated-packages.txt
          ./dependency-check-reports/
          ./project/AMAPP.API/sbom.xml

  # Job 4: Verificações de Qualidade de Código
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  
      
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'    
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Check for exposed secrets
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      continue-on-error: true 
      with:
        args: --report-format sarif --exit-code 2

  # Job 5: DAST com OWASP ZAP
  dast-owasp-zap:
    name: OWASP ZAP Baseline Scan (DAST)
    runs-on: ubuntu-latest
    needs: build-and-test
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    steps:
      - name: Debug GitHub Context
        run: |
          echo "🔍 Debug Information:"
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Head ref: ${{ github.head_ref }}"
          echo "Base ref: ${{ github.base_ref }}"
          echo "SHA: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build API
        run: dotnet build --no-restore

      - name: Run API in background
        run: |
          dotnet run --no-build --urls "https://localhost:7237" &
          sleep 10
      
      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'https://localhost:7237'
          fail_action: false
          allow_issue_writing: true
          cmd_options: '-config api.disablekey=true -config scanner.includelargeresponse=false -config connection.dnsTtlSuccessfulQueries=0 -config connection.timeoutInSecs=10 -config connection.followredirects=true -config ssl.insecure=true'

      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: owasp-zap-report.html

  # Job 6: Deploy to vs833 DEI Server
  deploy:
    name: Deploy to DEI Servers
    runs-on: ubuntu-latest
    needs: [build-and-test]
    # Temporarily removed condition for testing
    # if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore and Build
        run: |
          dotnet restore
          dotnet build --configuration Release --no-restore

      - name: Publish Application
        run: |
          dotnet publish AMAPP.API.csproj \
            --configuration Release \
            --output ./publish \
            --no-build

      - name: Create Deployment Package
        run: |
          cd publish
          # Just create the package - use existing appsettings.json
          tar -czf ../amapp-deployment.tar.gz .
          cd ..
          echo "✅ Deployment package created for vs833"

      - name: Setup SSH Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VM_SSH_PRIVATE_KEY }}

      - name: Deploy to vs833 Server
        env:
          DEI_SERVER_HOST: vs833.dei.isep.ipp.pt
          DEI_SERVER_USER: root
        run: |
          echo "🚀 Deploying to vs833.dei.isep.ipp.pt:2226..."
          
          # Create deployment script
          cat > deploy-script.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Starting AMAPP deployment to /opt/amapp-api..."
          
          # Stop the service
          echo "Stopping amapp-api service..."
          sudo systemctl stop amapp-api || echo "Service was not running"
          
          # Backup current deployment
          if [ -d "/opt/amapp-api" ] && [ "$(ls -A /opt/amapp-api)" ]; then
            echo "Creating backup..."
            sudo cp -r /opt/amapp-api /opt/amapp-api.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # Clear deployment directory
          sudo rm -rf /opt/amapp-api/*
          
          # Extract new deployment
          echo "Extracting new deployment..."
          sudo tar -xzf /tmp/amapp-deployment.tar.gz -C /opt/amapp-api/
          
          # Set permissions
          sudo chown -R root:root /opt/amapp-api/
          sudo chmod +x /opt/amapp-api/AMAPP.API
          
          # Start the service
          echo "Starting amapp-api service..."
          sudo systemctl start amapp-api
          
          # Enable service if not already enabled
          sudo systemctl enable amapp-api
          
          # Wait for service to start
          sleep 10
          
          # Check service status
          if sudo systemctl is-active --quiet amapp-api; then
            echo "✅ AMAPP service is running successfully!"
            echo "🌐 Service accessible at: http://vs833.dei.isep.ipp.pt:2226"
            echo "🌐 External access via: https://vs-gate.dei.isep.ipp.pt:10833"
          else
            echo "❌ Service failed to start. Checking logs..."
            sudo journalctl -u amapp-api --no-pager -n 20
            exit 1
          fi
          
          # Clean up old backups (keep last 3)
          echo "Cleaning up old backups..."
          sudo find /opt -name "amapp-api.backup.*" -type d | sort -r | tail -n +4 | sudo xargs rm -rf 2>/dev/null || true
          
          echo "✅ Deployment completed successfully!"
          EOF
          
          chmod +x deploy-script.sh
          
          # Copy deployment package to server
          echo "📦 Copying deployment package to vs833..."
          scp -o StrictHostKeyChecking=no -P 22 \
            amapp-deployment.tar.gz \
            "$DEI_SERVER_USER@$DEI_SERVER_HOST:/tmp/amapp-deployment.tar.gz"
          
          # Copy and execute deployment script
          echo "📋 Executing deployment script..."
          scp -o StrictHostKeyChecking=no -P 22 \
            deploy-script.sh \
            "$DEI_SERVER_USER@$DEI_SERVER_HOST:/tmp/deploy-script.sh"
          
          ssh -o StrictHostKeyChecking=no -p 22 \
            "$DEI_SERVER_USER@$DEI_SERVER_HOST" \
            "chmod +x /tmp/deploy-script.sh && /tmp/deploy-script.sh"

      - name: Health Check
        run: |
          echo "🏥 Performing health checks..."
          
          # Wait for application to fully start
          sleep 30
          
          # Test internal endpoint (vs833:2226)
          echo "Testing internal endpoint..."
          if ssh -o StrictHostKeyChecking=no -p 22 root@vs833.dei.isep.ipp.pt \
             "curl -f -s http://localhost:2226/swagger/index.html > /dev/null"; then
            echo "✅ Internal Swagger (vs833:2226/swagger) is responding"
          else
            echo "⚠️ Internal Swagger endpoint check failed"
          fi
          
          # Test internal API health endpoint
          if ssh -o StrictHostKeyChecking=no -p 22 root@vs833.dei.isep.ipp.pt \
             "curl -f -s http://localhost:2226/health > /dev/null"; then
            echo "✅ Internal Health endpoint (vs833:2226/health) is responding"
          else
            echo "⚠️ Internal Health endpoint check failed"
          fi
          
          # Test external endpoints (vs-gate:10833)
          echo "Testing external endpoints..."
          for i in {1..5}; do
            # Test Swagger
            if curl -f -k -s "https://vs-gate.dei.isep.ipp.pt:10833/swagger/index.html" > /dev/null; then
              echo "✅ External Swagger (vs-gate:10833/swagger) is responding on attempt $i"
              SWAGGER_OK=true
            else
              echo "⚠️ External Swagger check failed on attempt $i"
              SWAGGER_OK=false
            fi
            
            # Test Health endpoint
            if curl -f -k -s "https://vs-gate.dei.isep.ipp.pt:10833/health" > /dev/null; then
              echo "✅ External Health (vs-gate:10833/health) is responding on attempt $i"
              HEALTH_OK=true
            else
              echo "⚠️ External Health check failed on attempt $i"
              HEALTH_OK=false
            fi
            
            # If both endpoints are working, exit success
            if [ "$SWAGGER_OK" = true ] && [ "$HEALTH_OK" = true ]; then
              echo "🎉 All endpoints are responding!"
              echo "🌐 Application URLs:"
              echo "   - Swagger: https://vs-gate.dei.isep.ipp.pt:10833/swagger"
              echo "   - Health: https://vs-gate.dei.isep.ipp.pt:10833/health"
              echo "   - API: https://vs-gate.dei.isep.ipp.pt:10833"
              exit 0
            fi
            
            if [ $i -eq 5 ]; then
              echo "🔍 Some external endpoints not responding, but deployment may still be successful"
              echo "🌐 Try accessing:"
              echo "   - Swagger: https://vs-gate.dei.isep.ipp.pt:10833/swagger"
              echo "   - Health: https://vs-gate.dei.isep.ipp.pt:10833/health"
              exit 0
            fi
            sleep 10
          done

      - name: Upload Deployment Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: amapp-deployment-vs833-${{ github.sha }}
          path: |
            ./project/AMAPP.API/amapp-deployment.tar.gz
            ./project/AMAPP.API/deploy-script.sh

      - name: Deployment Summary
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ AMAPP successfully deployed to vs833!"
            echo ""
            echo "🌐 Application URLs:"
            echo "   - API: https://vs-gate.dei.isep.ipp.pt:10833"
            echo "   - Swagger: https://vs-gate.dei.isep.ipp.pt:10833/swagger"
            echo "   - Health: https://vs-gate.dei.isep.ipp.pt:10833/health"
            echo "   - Internal: http://vs833.dei.isep.ipp.pt:2226"
            echo ""
            echo "🔧 Service Management:"
            echo "   - Status: sudo systemctl status amapp-api"
            echo "   - Logs: sudo journalctl -u amapp-api -f"
            echo "   - Restart: sudo systemctl restart amapp-api"
          else
            echo "❌ Deployment to vs833 failed"
            echo "🔍 Check the logs above for details"
          fi