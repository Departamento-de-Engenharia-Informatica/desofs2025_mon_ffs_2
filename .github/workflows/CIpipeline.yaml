name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Executa semanalmente aos domingos
  workflow_dispatch: # Permite execução manual do workflow

jobs:
  # Job 1: Análise de Código com CodeQL
  analyze:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./project/AMAPP.API

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]  # Adicione outros idiomas se necessário

    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # config-file: .github/codeql/codeql-config.yml

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Build
      run: |
        dotnet restore
        dotnet build --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: '/language:${{ matrix.language }}'
        output: codeql-results.sarif
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 2: Análise de Código com CodeQL
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: amappdb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore
        
      - name: Run tests with coverage
        run: |
          # Executar testes com cobertura
          if [ -f "AMAPP.API.Tests/AMAPP.API.Tests.csproj" ]; then
            echo "Running tests from AMAPP.API.Tests project..."
            dotnet test AMAPP.API.Tests/AMAPP.API.Tests.csproj --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
          elif [ -f "AMAP.API.Tests/AMAP.API.Tests.csproj" ]; then
            echo "Running tests from AMAP.API.Tests project..."
            dotnet test AMAP.API.Tests/AMAP.API.Tests.csproj --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
          elif [ -f "AMAPP.API.sln" ]; then
            echo "Running tests from solution..."
            dotnet test AMAPP.API.sln --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
          else
            echo "Running tests from main project (no separate test project found)..."
            dotnet test --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
          fi
          
          # — Smoke tests
          echo "Executando testes de smoke..."
          mkdir -p ./SmokeTestResults
          echo "Iniciando testes de smoke em $(date)" > ./SmokeTestResults/smoke-report.txt

          # start API in background and remember its PID
          dotnet run --no-build --urls http://localhost:7237 &
          API_PID=$!
          echo "API PID is $API_PID"
          
          echo "Aguardando a API iniciar..."
          sleep 10

          # health endpoint
          echo "Verificando endpoint de saúde..."
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:7237/health)
          echo "Status do endpoint /health: $HEALTH_STATUS" >> ./SmokeTestResults/smoke-report.txt
          if [ "$HEALTH_STATUS" = "200" ]; then
            echo " Health check passou" >> ./SmokeTestResults/smoke-report.txt
          else
            echo " Health check falhou" >> ./SmokeTestResults/smoke-report.txt
          fi

          # swagger endpoint
          echo "Verificando documentação Swagger..."
          SWAGGER_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:7237/swagger/index.html)
          echo "Status do endpoint /swagger: $SWAGGER_STATUS" >> ./SmokeTestResults/smoke-report.txt
          if [ "$SWAGGER_STATUS" = "200" ]; then
            echo " Swagger check passou" >> ./SmokeTestResults/smoke-report.txt
          else
            echo " Swagger check falhou" >> ./SmokeTestResults/smoke-report.txt
          fi
          
          # stop only that API instance
          echo "Parando a API (PID $API_PID)..."
          kill $API_PID || echo "Não foi possível encerrar a API com PID $API_PID"
          
          # Instalar e executar testes de mutação
          echo "====== INICIANDO TESTES DE MUTAÇÃO ======"
          echo "Instalando Stryker para testes de mutação..."
          dotnet tool install -g dotnet-stryker || echo "Stryker já instalado"
          
          echo "Executando testes de mutação em classes críticas..."
          dotnet stryker \
            -p AMAPP.API.csproj \
            --reporter "html" \
            --reporter "progress" \
            --mutation-level Basic \
            --output "MutationReports"
          echo "✅ Testes de mutação concluídos. Relatórios gerados em ./MutationReports"
          ls -la MutationReports || echo "Diretório MutationReports não encontrado"
          
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=amappdb_test;Username=postgres;Password=postgres;"
        continue-on-error: true
        
      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
        with:
          reports: './project/AMAPP.API/TestResults/**/coverage.cobertura.xml'
          targetdir: './project/AMAPP.API/CoverageReport'
          reporttypes: 'HtmlInline;Cobertura;TextSummary'
      
      - name: Upload test results and coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-and-coverage
          path: |
            ./project/AMAPP.API/TestResults/
            ./project/AMAPP.API/CoverageReport/
            ./project/AMAPP.API/SmokeTestResults/
            ./project/AMAPP.API/MutationReports/
            
      - name: Publish for scanning
        run: |
          dotnet publish AMAPP.API.csproj \
            --configuration Release \
            --framework net8.0 \
            --output ./bin/Release/net8.0
  
      - name: Scan .NET build output with Trivy (template mode)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scan-ref: './project/AMAPP.API/bin/Release/net8.0'
          format: template                # ← template mode always writes SARIF
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          scanners: 'vuln,secret,misconfig'
          severity: 'MEDIUM,HIGH,CRITICAL'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'Trivy'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 
  # Job 3: Verificação de Dependências (SCA)
  dependency-check:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: List vulnerable packages
      run: |
        echo "Checking for vulnerable NuGet packages..."
        dotnet list package --vulnerable --include-transitive > vulnerable-packages.txt
        cat vulnerable-packages.txt
      continue-on-error: true
    
    - name: Check for outdated packages
      run: |
        echo "Checking for outdated packages..."
        dotnet list package --outdated > outdated-packages.txt
        cat outdated-packages.txt
      continue-on-error: true
    
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'AMAPP.API'
        path: './project'
        format: 'HTML,JSON'
        out: 'dependency-check-reports'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
      continue-on-error: true
    
    - name: Generate SBOM
      uses: CycloneDX/gh-dotnet-generate-sbom@v1
      continue-on-error: true
      with:
        path: ./project/AMAPP.API/AMAPP.API.csproj
        out: ./project/AMAPP.API

    - name: Normalize SBOM filename
      continue-on-error: true
      run: |
        #!/usr/bin/env bash
        WORKDIR="$GITHUB_WORKSPACE"
        PROJDIR="$WORKDIR/project/AMAPP.API"
        mkdir -p "$PROJDIR"

        # look for bom.xml in either location
        if [[ -f "$WORKDIR/bom.xml" ]]; then
          SRC="$WORKDIR/bom.xml"
        elif [[ -f "$PROJDIR/bom.xml" ]]; then
          SRC="$PROJDIR/bom.xml"
        else
          echo "⚠️ SBOM not found; creating empty placeholder"
          echo '<?xml version="1.0"?><bom></bom>' > "$PROJDIR/sbom.xml"
          exit 0
        fi

        mv "$SRC" "$PROJDIR/sbom.xml"
        echo "✅ SBOM moved to project/AMAPP.API/sbom.xml"
        
    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          ./project/AMAPP.API/vulnerable-packages.txt
          ./project/AMAPP.API/outdated-packages.txt
          ./dependency-check-reports/
          ./project/AMAPP.API/sbom.xml

  # Job 4: Verificações de Qualidade de Código
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  
      
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'    
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Check for exposed secrets
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      continue-on-error: true 
      with:
        args: --report-format sarif --exit-code 2 :contentReference[oaicite:8]{index=8}

    
  # Job 5: DAST com OWASP ZAP
  dast-owasp-zap:
    name: OWASP ZAP Baseline Scan (DAST)
    runs-on: ubuntu-latest
    needs: build-and-test
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build API
        run: dotnet build --no-restore

      - name: Run API in background
        run: |
          dotnet run --no-build --urls "https://localhost:7237" &
          sleep 10
      
      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'https://localhost:7237'
          fail_action: false
          allow_issue_writing: true
          cmd_options: '-config api.disablekey=true -config scanner.includelargeresponse=false -config connection.dnsTtlSuccessfulQueries=0 -config connection.timeoutInSecs=10 -config connection.followredirects=true -config ssl.insecure=true'
  
      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: owasp-zap-report.html
          
  # Job 6: JWT Security Testing
  jwt-security-scan:
    name: JWT Security Testing
    runs-on: ubuntu-latest
    needs: dast-owasp-zap
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
  
      - name: Install jwt_tool
        run: |
          git clone https://github.com/ticarpi/jwt_tool
          cd jwt_tool
          pip install -r requirements.txt
          chmod +x jwt_tool.py
  
      - name: Build and Run API
        run: |
          # Build the specific project file
          dotnet build AMAPP.API.csproj --configuration Release
          # Run with explicit project path
          dotnet run --project AMAPP.API.csproj --configuration Release --urls "http://localhost:7237" &
          echo "Waiting for API to start..."
          sleep 15
  
      - name: Run JWT tests
        run: |
          cd jwt_tool
          mkdir -p results
          python3 jwt_tool.py -M at -t http://localhost:7237/api/auth/login -rd results/jwt_scan.txt || echo "JWT scan completed"
        continue-on-error: true
        
        
      - name: Debug JWT results directory
        run: |
          echo "Working directory: $PWD"
          ls -R project/AMAPP.API/jwt_tool
      
      - name: Debug directory structure
        run: |
          echo "Verificando estrutura de diretórios:"
          pwd
          ls -la
          echo "Conteúdo de jwt_tool:"
          ls -la jwt_tool/ || echo "Diretório não encontrado"
          echo "Conteúdo de jwt_tool/results:"
          ls -la jwt_tool/results/ || echo "Diretório não encontrado"
        continue-on-error: true
  
      - name: Upload JWT test results
        uses: actions/upload-artifact@v4
        with:
          name: jwt-security-results
          path: ./jwt_tool/results/
        
   # Job 7: Deployment
  deploy-localhost:
    name: Deploy to Localhost
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, dependency-check]
    # Deploy when creating/updating PR to develop branch
    if: |
      github.event_name == 'pull_request' && 
      github.event.pull_request.base.ref == 'develop'
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Set deployment info
        run: |
          echo "DEPLOY_ENV=Development" >> $GITHUB_ENV
          echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
          echo "TARGET_BRANCH=${{ github.base_ref }}" >> $GITHUB_ENV
          echo "PACKAGE_NAME=amapp-pr-${{ github.event.number }}-deployment" >> $GITHUB_ENV
          echo "RETENTION_DAYS=3" >> $GITHUB_ENV
          echo "PR_NUMBER=${{ github.event.number }}" >> $GITHUB_ENV

      - name: Create deployment package
        run: |
          echo " PULL REQUEST DEPLOYMENT"
          echo " Creating deployment for PR #${{ env.PR_NUMBER }}"
          echo " Feature branch: ${{ env.BRANCH_NAME }}"
          echo " Target branch: ${{ env.TARGET_BRANCH }}"
          echo ""
          
          dotnet restore
          dotnet build --configuration Release
          dotnet publish --configuration Release --output ./deploy --self-contained false
          
          echo " Creating startup scripts..."
          
          # Windows startup script
          cat > ./deploy/start.bat << EOF
          @echo off
          echo  PULL REQUEST DEPLOYMENT
          echo  Starting AMAPP API...
          set ASPNETCORE_ENVIRONMENT=${{ env.DEPLOY_ENV }}
          set ASPNETCORE_URLS=http://localhost:5000
          echo.
          echo  PR #${{ env.PR_NUMBER }}: ${{ env.BRANCH_NAME }} → ${{ env.TARGET_BRANCH }}
          echo  FEATURE TESTING BUILD
          echo  API: http://localhost:5000
          echo  Swagger: http://localhost:5000/swagger
          echo   Health: http://localhost:5000/health
          echo.
          echo   This is a PR build for feature testing
          echo.
          dotnet AMAPP.API.dll
          pause
          EOF
          
          # Linux startup script
          cat > ./deploy/start.sh << 'EOF'
          #!/bin/bash
          echo " PULL REQUEST DEPLOYMENT"
          echo " Starting AMAPP API..."
          export ASPNETCORE_ENVIRONMENT=${{ env.DEPLOY_ENV }}
          export ASPNETCORE_URLS="http://localhost:5000"
          echo ""
          echo " PR #${{ env.PR_NUMBER }}: ${{ env.BRANCH_NAME }} → ${{ env.TARGET_BRANCH }}"
          echo " FEATURE TESTING BUILD"
          echo " API: http://localhost:5000"
          echo " Swagger: http://localhost:5000/swagger"
          echo "  Health: http://localhost:5000/health"
          echo ""
          echo "  This is a PR build for feature testing"
          echo ""
          echo "Press Ctrl+C to stop"
          dotnet AMAPP.API.dll
          EOF
          
          chmod +x ./deploy/start.sh
          
          echo " PR deployment package created!"

      - name: Test deployment package
        run: |
          cd ./deploy
          echo ""
          echo "===  PR #${{ env.PR_NUMBER }} DEPLOYMENT PACKAGE ==="
          echo ""
          echo " Package contents:"
          ls -la
          echo ""
          echo " Verification:"
          [ -f "AMAPP.API.dll" ] && echo "   AMAPP.API.dll found" || (echo "  ❌ AMAPP.API.dll missing" && exit 1)
          [ -f "appsettings.json" ] && echo "   appsettings.json found" || echo "  ⚠️  appsettings.json missing"
          [ -f "start.sh" ] && echo "   start.sh created" || echo "  ❌ start.sh missing"
          [ -f "start.bat" ] && echo "   start.bat created" || echo "  ❌ start.bat missing"
          echo ""
          echo " PR deployment ready for testing!"

      - name: Upload PR deployment package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}
          path: ./project/AMAPP.API/deploy/
          retention-days: ${{ env.RETENTION_DAYS }}

      - name: PR deployment summary
        run: |
          echo ""
          echo " PR DEPLOYMENT COMPLETED! "
          echo ""
          echo " Package: ${{ env.PACKAGE_NAME }}"
          echo " PR: #${{ env.PR_NUMBER }}"
          echo " Feature: ${{ env.BRANCH_NAME }}"
          echo " Target: ${{ env.TARGET_BRANCH }}"
          echo " Environment: Development"
          echo " Built: $(date)"
          echo " Retention: ${{ env.RETENTION_DAYS }} days"
          echo ""
          echo " To test this PR:"
          echo "   1. Download artifact: ${{ env.PACKAGE_NAME }}"
          echo "   2. Extract the package"
          echo "   3. Windows: run start.bat"
          echo "   4. Linux/Mac: run ./start.sh"
          echo "   5. Test at http://localhost:5000"
          echo ""
          echo " Ready for PR review and testing!"