name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sundays
  workflow_dispatch: # Manual trigger

jobs:
  # Job 1: Security Analysis with CodeQL
  analyze:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./project/AMAPP.API

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Build
      run: |
        dotnet restore
        dotnet build --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: '/language:${{ matrix.language }}'

  # Job 2: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: amappdb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore
        
      - name: Run tests with coverage
        run: |
          dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
        env:
          ConnectionStrings__PostgreSQLConnection: "Host=localhost;Port=5432;Database=amappdb_test;Username=postgres;Password=postgres;"
        continue-on-error: true
        
      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
        if: always()
        with:
          reports: './project/AMAPP.API/TestResults/**/coverage.cobertura.xml'
          targetdir: './project/AMAPP.API/CoverageReport'
          reporttypes: 'HtmlInline;Cobertura'
      
      - name: Publish application
        run: dotnet publish AMAPP.API.csproj -c Release -o ./publish
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-package
          path: ./project/AMAPP.API/publish/

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            ./project/AMAPP.API/TestResults/
            ./project/AMAPP.API/CoverageReport/
            
      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scan-ref: './project/AMAPP.API/publish'
          format: sarif
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 3: Dependency Security Check
  dependency-check:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Check vulnerable packages
      run: |
        dotnet list package --vulnerable --include-transitive > vulnerable-packages.txt 2>&1 || true
        cat vulnerable-packages.txt
      continue-on-error: true
    
    - name: Check outdated packages
      run: |
        dotnet list package --outdated > outdated-packages.txt 2>&1 || true
        cat outdated-packages.txt
      continue-on-error: true
        
    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-reports
        path: |
          ./project/AMAPP.API/vulnerable-packages.txt
          ./project/AMAPP.API/outdated-packages.txt

  # Job 4: Code Quality Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Check for secrets
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

  # Job 5: DAST with OWASP ZAP
  dast-scan:
    name: OWASP ZAP Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    defaults:
      run:
        working-directory: ./project/AMAPP.API
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore and build
        run: |
          dotnet restore
          dotnet build --no-restore

      - name: Run API for scanning
        run: |
          dotnet run --no-build --urls "http://localhost:7237" &
          sleep 15
          curl -f http://localhost:7237/swagger/index.html || echo "API not ready"
      
      - name: Run OWASP ZAP scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:7237'
          fail_action: false

      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-scan-report
          path: report_html.html

  # Job 6: Deploy to ISEP VM
  deploy-to-vm:
    name: Deploy to ISEP VM
    runs-on: ubuntu-latest
    needs: [build-and-test, dependency-check, code-quality]
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'develop'
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-package
          path: ./publish

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VM_SSH_PRIVATE_KEY }}

      - name: Deploy to VM
        run: |
          # Add host to known_hosts
          ssh-keyscan -p 10833 vsgate-s1.dei.isep.ipp.pt >> ~/.ssh/known_hosts || true
          
          VM_HOST="vsgate-s1.dei.isep.ipp.pt"
          VM_PORT="10833"
          VM_USER="root"
          
          echo "Deploying to VM..."
          
          # Stop existing service
          ssh -p $VM_PORT $VM_USER@$VM_HOST "systemctl stop amapp-api || true"
          
          # Upload files
          ssh -p $VM_PORT $VM_USER@$VM_HOST "mkdir -p /opt/amapp-api"
          scp -P $VM_PORT -r ./publish/* $VM_USER@$VM_HOST:/opt/amapp-api/
          
          # Create simple service
          ssh -p $VM_PORT $VM_USER@$VM_HOST "
            cat > /etc/systemd/system/amapp-api.service << 'EOF'
          [Unit]
          Description=AMAPP API
          After=network.target

          [Service]
          Type=simple
          Environment=ASPNETCORE_ENVIRONMENT=Production
          WorkingDirectory=/opt/amapp-api
          ExecStart=/usr/bin/dotnet /opt/amapp-api/AMAPP.API.dll --urls http://0.0.0.0:2226
          Restart=always
          User=root

          [Install]
          WantedBy=multi-user.target
          EOF
            systemctl daemon-reload
            systemctl enable amapp-api
            systemctl start amapp-api
            sleep 10
            systemctl status amapp-api
          "

      - name: Health check
        run: |
          sleep 30
          curl -f https://vs-gate.dei.isep.ipp.pt:10833/swagger/index.html || curl -f http://vs-gate.dei.isep.ipp.pt:10833/swagger/index.html || echo "API not responding"