name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Executa semanalmente aos domingos
  workflow_dispatch: # Permite execução manual do workflow

jobs:
  # Job 1: Análise de Código com CodeQL
  analyze:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./project/AMAPP.API

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]  # Adicione outros idiomas se necessário

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Build
      run: |
        dotnet restore
        dotnet build --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: '/language:${{ matrix.language }}'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 2: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: amappdb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore
        
      - name: Run tests with coverage
        run: |
          # Executar testes com cobertura
          if [ -f "../AMAP.API.Tests/AMAP.Tests.csproj" ]; then
            echo "Running tests from AMAP.API.Tests project..."
            dotnet test ../AMAP.API.Tests/AMAP.Tests.csproj --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
          elif [ -f "AMAPP.API.sln" ]; then
            echo "Running tests from solution..."
            dotnet test AMAPP.API.sln --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
          else
            echo "Running tests from main project..."
            dotnet test --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
          fi
          
          # Smoke tests
          echo "Executando testes de smoke..."
          mkdir -p ./SmokeTestResults
          echo "Iniciando testes de smoke em $(date)" > ./SmokeTestResults/smoke-report.txt

          # start API in background and remember its PID
          dotnet run --no-build --urls http://localhost:7237 &
          API_PID=$!
          echo "API PID is $API_PID"
          
          echo "Aguardando a API iniciar..."
          sleep 15

          # health endpoint (try swagger as health check since /health might not exist)
          echo "Verificando endpoint Swagger..."
          SWAGGER_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:7237/swagger/index.html || echo "000")
          echo "Status do endpoint /swagger: $SWAGGER_STATUS" >> ./SmokeTestResults/smoke-report.txt
          if [ "$SWAGGER_STATUS" = "200" ]; then
            echo "✅ Swagger check passou" >> ./SmokeTestResults/smoke-report.txt
          else
            echo "❌ Swagger check falhou" >> ./SmokeTestResults/smoke-report.txt
          fi
          
          # stop only that API instance
          echo "Parando a API (PID $API_PID)..."
          kill $API_PID || echo "Não foi possível encerrar a API com PID $API_PID"
          sleep 2
          
        env:
          ConnectionStrings__PostgreSQLConnection: "Host=localhost;Port=5432;Database=amappdb_test;Username=postgres;Password=postgres;"
        continue-on-error: true
        
      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
        if: always()
        with:
          reports: './project/AMAPP.API/TestResults/**/coverage.cobertura.xml'
          targetdir: './project/AMAPP.API/CoverageReport'
          reporttypes: 'HtmlInline;Cobertura;TextSummary'
      
      # Publish the application for deployment
      - name: Publish application
        run: |
          dotnet publish AMAPP.API.csproj \
            --configuration Release \
            --framework net8.0 \
            --output ./publish \
            --no-restore
      
      - name: Upload build artifacts for deployment
        uses: actions/upload-artifact@v4
        with:
          name: vm-deployment-package
          path: ./project/AMAPP.API/publish/
          retention-days: 1
      
      - name: Upload test results and coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-and-coverage
          path: |
            ./project/AMAPP.API/TestResults/
            ./project/AMAPP.API/CoverageReport/
            ./project/AMAPP.API/SmokeTestResults/
            
      - name: Scan .NET build output with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scan-ref: './project/AMAPP.API/publish'
          format: template
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          scanners: 'vuln,secret,misconfig'
          severity: 'MEDIUM,HIGH,CRITICAL'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'Trivy'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 
  # Job 3: Verificação de Dependências (SCA)
  dependency-check:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: List vulnerable packages
      run: |
        echo "Checking for vulnerable NuGet packages..."
        dotnet list package --vulnerable --include-transitive > vulnerable-packages.txt 2>&1 || true
        cat vulnerable-packages.txt
      continue-on-error: true
    
    - name: Check for outdated packages
      run: |
        echo "Checking for outdated packages..."
        dotnet list package --outdated > outdated-packages.txt 2>&1 || true
        cat outdated-packages.txt
      continue-on-error: true
    
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'AMAPP.API'
        path: './project'
        format: 'HTML,JSON'
        out: 'dependency-check-reports'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 9
      continue-on-error: true
    
    - name: Generate SBOM
      run: |
        dotnet tool install --global CycloneDX.Tool || true
        dotnet CycloneDx AMAPP.API.csproj -o ./sbom.xml || echo "SBOM generation failed"
      continue-on-error: true
        
    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-reports
        path: |
          ./project/AMAPP.API/vulnerable-packages.txt
          ./project/AMAPP.API/outdated-packages.txt
          ./dependency-check-reports/
          ./project/AMAPP.API/sbom.xml

  # Job 4: Verificações de Qualidade de Código
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Check for exposed secrets
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

  # Job 5: DAST com OWASP ZAP
  dast-owasp-zap:
    name: OWASP ZAP Baseline Scan (DAST)
    runs-on: ubuntu-latest
    needs: build-and-test
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build API
        run: dotnet build --no-restore

      - name: Run API in background
        run: |
          dotnet run --no-build --urls "http://localhost:7237" &
          sleep 15
          
          # Test if API is running
          curl -f http://localhost:7237/swagger/index.html || echo "API may not be ready"
      
      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:7237'
          fail_action: false
          allow_issue_writing: false
          cmd_options: '-config api.disablekey=true -config scanner.includelargeresponse=false -config connection.dnsTtlSuccessfulQueries=0 -config connection.timeoutInSecs=10'

      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-scan-report
          path: report_html.html

  # Job 6: Deploy to ISEP VM
  deploy-to-vm:
    name: Deploy to ISEP VM
    runs-on: ubuntu-latest
    needs: [build-and-test, dependency-check, code-quality]
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'develop'
    
    steps:
      - name: Download published artifacts
        uses: actions/download-artifact@v4
        with:
          name: vm-deployment-package
          path: ./publish

      - name: Verify downloaded artifacts
        run: |
          echo "Downloaded files:"
          ls -la ./publish/
          
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VM_SSH_PRIVATE_KEY }}

      - name: Add VM to known hosts
        run: |
          mkdir -p ~/.ssh
          
          # Try to resolve the hostname first
          echo "🔍 Attempting to resolve hostname..."
          nslookup vsgate-ssh.dei.isep.ipp.pt || echo "DNS resolution failed"
          
          # Try alternative hostnames
          HOSTNAMES=(
            "vsgate-ssh.dei.isep.ipp.pt"
            "vs-gate.dei.isep.ipp.pt" 
            "vsgate-s1.dei.isep.ipp.pt"
          )
          
          for hostname in "${HOSTNAMES[@]}"; do
            echo "Trying to scan SSH key for $hostname..."
            if ssh-keyscan -p 10833 -T 10 "$hostname" >> ~/.ssh/known_hosts 2>/dev/null; then
              echo "✅ Successfully added $hostname to known_hosts"
              break
            else
              echo "❌ Failed to scan $hostname"
            fi
          done
          
          # If all fail, disable strict host checking (less secure but may work)
          if [ ! -s ~/.ssh/known_hosts ]; then
            echo "⚠️  All SSH key scans failed. Configuring SSH to skip host verification..."
            cat >> ~/.ssh/config << 'EOF'
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            LogLevel ERROR
          EOF
          fi
          
          echo "Contents of known_hosts:"
          cat ~/.ssh/known_hosts || echo "known_hosts is empty"

      - name: Deploy and start service
        run: |
          # Try different possible hostnames for ISEP VM
          POSSIBLE_HOSTS=(
            "vsgate-ssh.dei.isep.ipp.pt"
            "vs-gate.dei.isep.ipp.pt"
            "vsgate-s1.dei.isep.ipp.pt"
          )
          
          VM_PORT="10833"
          VM_USER="root"
          DEPLOYED=false
          
          for VM_HOST in "${POSSIBLE_HOSTS[@]}"; do
            echo "🚀 Attempting deployment to $VM_HOST..."
            
            # Test SSH connectivity first
            if ssh -p $VM_PORT -o ConnectTimeout=10 -o BatchMode=yes $VM_USER@$VM_HOST "echo 'SSH connection successful'" 2>/dev/null; then
              echo "✅ SSH connection to $VM_HOST successful"
              
              # Stop existing service
              ssh -p $VM_PORT $VM_USER@$VM_HOST "systemctl stop amapp-api || true"
              
              # Create directory and upload files
              ssh -p $VM_PORT $VM_USER@$VM_HOST "mkdir -p /opt/amapp-api"
              scp -P $VM_PORT -r ./publish/* $VM_USER@$VM_HOST:/opt/amapp-api/
              
              # Create systemd service and start
              ssh -p $VM_PORT $VM_USER@$VM_HOST "
                # Create systemd service
                cat > /etc/systemd/system/amapp-api.service << 'EOF'
              [Unit]
              Description=AMAPP API Service
              After=network.target

              [Service]
              Type=notify
              Environment=ASPNETCORE_URLS=http://0.0.0.0:2226
              Environment=ASPNETCORE_ENVIRONMENT=Production
              WorkingDirectory=/opt/amapp-api
              ExecStart=/usr/bin/dotnet /opt/amapp-api/AMAPP.API.dll
              Restart=always
              RestartSec=10
              User=root

              [Install]
              WantedBy=multi-user.target
              EOF
                
                # Start the service
                systemctl daemon-reload
                systemctl enable amapp-api
                systemctl start amapp-api
                sleep 10
                
                # Check status and logs
                echo '✅ Service status:'
                systemctl status amapp-api --no-pager || true
                
                echo '📋 Recent logs:'
                journalctl -u amapp-api --no-pager -n 20 || true
                
                echo '🔍 Process check:'
                ps aux | grep dotnet || echo 'No dotnet processes found'
                
                echo '🌐 Network check:'
                netstat -tlnp | grep 2226 || echo 'Port 2226 not listening'
              "
              
              DEPLOYED=true
              echo "✅ Successfully deployed to $VM_HOST"
              break
            else
              echo "❌ SSH connection to $VM_HOST failed"
            fi
          done
          
          if [ "$DEPLOYED" = false ]; then
            echo "❌ Failed to deploy to any host"
            exit 1
          fi

      - name: Health check
        run: |
          echo "🔍 Testing deployment..."
          sleep 15
          
          # Based on ISEP port mappings: port 2226 maps to vs-gate.dei.isep.ipp.pt:10833 (HTTPS)
          POSSIBLE_URLS=(
            "https://vs-gate.dei.isep.ipp.pt:10833/swagger/index.html"
            "https://vs-gate.dei.isep.ipp.pt:10833/swagger"
            "https://vs-gate.dei.isep.ipp.pt:10833/"
            "http://vs-gate.dei.isep.ipp.pt:10833/swagger/index.html"
            "http://vs-gate.dei.isep.ipp.pt:10833/swagger"
            "http://vs-gate.dei.isep.ipp.pt:10833/"
          )
          
          SUCCESS=false
          
          for url in "${POSSIBLE_URLS[@]}"; do
            echo "Testing URL: $url"
            
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$url" -m 30 --connect-timeout 10 -k || echo "000")
            
            echo "Status for $url: $HTTP_STATUS"
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "✅ SUCCESS: API deployed and accessible at $url"
              SUCCESS=true
              WORKING_URL="$url"
              break
            elif [ "$HTTP_STATUS" = "302" ] || [ "$HTTP_STATUS" = "301" ]; then
              echo "🔄 Redirect detected at $url (Status: $HTTP_STATUS)"
            else
              echo "❌ Failed: $url (Status: $HTTP_STATUS)"
            fi
          done
          
          if [ "$SUCCESS" = false ]; then
            echo "❌ All health check attempts failed"
            echo "💡 Troubleshooting info:"
            echo "   - Internal service should be running on port 2226"
            echo "   - External access should be via vs-gate.dei.isep.ipp.pt:10833"
            echo "   - Check if HTTPS/HTTP protocol mismatch"
          else
            echo "🎉 SUCCESS: API is accessible!"
            echo "🔗 Working URL: $WORKING_URL"
            echo ""
            echo "📍 API Endpoints:"
            echo "   - Swagger UI: ${WORKING_URL%/*}/swagger"
            echo "   - API Base: ${WORKING_URL%/*}/api/"
            echo "   - Products: ${WORKING_URL%/*}/api/product"
            echo "   - Auth: ${WORKING_URL%/*}/api/auth"
          fi