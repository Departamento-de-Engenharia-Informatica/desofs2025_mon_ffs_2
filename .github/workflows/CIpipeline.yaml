name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: amappdb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Run tests
        run: |
          if [ -f "../AMAP.API.Tests/AMAP.Tests.csproj" ]; then
            echo "Running tests from AMAP.API.Tests project..."
            dotnet test ../AMAP.API.Tests/AMAP.Tests.csproj --configuration Release --verbosity normal
          elif [ -f "AMAPP.API.sln" ]; then
            echo "Running tests from solution..."
            dotnet test AMAPP.API.sln --configuration Release --verbosity normal
          else
            echo "Running tests from main project..."
            dotnet test --configuration Release --verbosity normal
          fi
        env:
          ConnectionStrings__PostgreSQLConnection: "Host=localhost;Port=5432;Database=amappdb_test;Username=postgres;Password=postgres;"
        continue-on-error: true

      - name: Publish for deployment
        run: |
          dotnet publish AMAPP.API.csproj \
            --configuration Release \
            --framework net8.0 \
            --output ./publish \
            --self-contained false \
            --runtime linux-x64
            
      - name: Upload published artifacts
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ./project/AMAPP.API/publish/

  # Deploy to VM only on PRs to develop or pushes to main
  deploy-to-vm:
    name: Deploy to ISEP VM
    runs-on: ubuntu-latest
    needs: build-and-test
    if: (github.base_ref == 'develop' && github.event_name == 'pull_request') || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    
    steps:
      - name: Download published artifacts
        uses: actions/download-artifact@v4
        with:
          name: published-app
          path: ./publish

      - name: Create production configuration
        run: |
          cat > ./appsettings.Production.json << 'EOF'
          {
            "Logging": {
              "LogLevel": {
                "Default": "Information",
                "Microsoft.AspNetCore": "Warning"
              }
            },
            "AllowedHosts": "vs-gate.dei.isep.ipp.pt:10833,vs833.dei.isep.ipp.pt:2226,localhost",
            "JwtSettings": {
              "Secret": "PLACEHOLDER_JWT_SECRET",
              "ExpiryMinutes": 30,
              "Issuer": "AMAPP.API",
              "Audience": "AMAPP.Users"
            },
            "EmailConfiguration": {
              "From": "amapengreqg3@gmail.com",
              "SmtpServer": "smtp.gmail.com",
              "Port": "587",
              "EmailEnvUsername": "EMAIL_USERNAME",
              "EmailEnvPassword": "EMAIL_PASSWORD"
            },
            "ConnectionStrings": {
              "PostgreSQLConnection": "PLACEHOLDER_DB_CONNECTION"
            }
          }
          EOF
          
          sed -i "s|PLACEHOLDER_JWT_SECRET|${{ secrets.JWT_SECRET }}|g" ./appsettings.Production.json
          sed -i "s|PLACEHOLDER_DB_CONNECTION|${{ secrets.DB_CONNECTION_STRING }}|g" ./appsettings.Production.json

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VM_SSH_PRIVATE_KEY }}

      - name: Add VM to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p 10833 vsgate-ssh.dei.isep.ipp.pt >> ~/.ssh/known_hosts

      - name: Deploy to VM
        run: |
          VM_HOST="vsgate-ssh.dei.isep.ipp.pt"
          VM_PORT="10833"
          VM_USER="root"
          
          echo "Testing SSH connection..."
          ssh -p $VM_PORT $VM_USER@$VM_HOST "echo 'SSH connection successful'"
          
          echo "Creating directories..."
          ssh -p $VM_PORT $VM_USER@$VM_HOST "mkdir -p /opt/amapp-api /etc/systemd/system"
          
          echo "Stopping existing service..."
          ssh -p $VM_PORT $VM_USER@$VM_HOST "systemctl stop amapp-api || true"
          
          echo "Uploading application files..."
          scp -P $VM_PORT -r ./publish/* $VM_USER@$VM_HOST:/opt/amapp-api/
          
          echo "Uploading configuration..."
          scp -P $VM_PORT ./appsettings.Production.json $VM_USER@$VM_HOST:/opt/amapp-api/

      - name: Create systemd service
        run: |
          VM_HOST="vsgate-ssh.dei.isep.ipp.pt"
          VM_PORT="10833"
          VM_USER="root"
          
          ssh -p $VM_PORT $VM_USER@$VM_HOST 'cat > /etc/systemd/system/amapp-api.service << EOF
          [Unit]
          Description=AMAPP API Service
          After=network.target
          
          [Service]
          Type=notify
          Environment=ASPNETCORE_URLS=http://0.0.0.0:2226
          Environment=ASPNETCORE_ENVIRONMENT=Production
          WorkingDirectory=/opt/amapp-api
          ExecStart=/usr/bin/dotnet /opt/amapp-api/AMAPP.API.dll
          Restart=always
          RestartSec=10
          KillSignal=SIGINT
          SyslogIdentifier=amapp-api
          User=root
          
          [Install]
          WantedBy=multi-user.target
          EOF'

      - name: Start service
        run: |
          VM_HOST="vsgate-ssh.dei.isep.ipp.pt"
          VM_PORT="10833"
          VM_USER="root"
          
          ssh -p $VM_PORT $VM_USER@$VM_HOST "
            chmod +x /opt/amapp-api/AMAPP.API
            chmod 644 /etc/systemd/system/amapp-api.service
            systemctl daemon-reload
            systemctl enable amapp-api
            systemctl start amapp-api
            sleep 5
            systemctl status amapp-api --no-pager
          "

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy-to-vm
    if: (github.base_ref == 'develop' && github.event_name == 'pull_request') || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    
    steps:
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VM_SSH_PRIVATE_KEY }}

      - name: Add VM to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p 10833 vsgate-ssh.dei.isep.ipp.pt >> ~/.ssh/known_hosts

      - name: Check service status
        run: |
          VM_HOST="vsgate-ssh.dei.isep.ipp.pt"
          VM_PORT="10833"
          VM_USER="root"
          
          echo "=== SERVICE STATUS ==="
          ssh -p $VM_PORT $VM_USER@$VM_HOST "
            systemctl is-active amapp-api && echo 'Service is active' || echo 'Service is not active'
            systemctl is-enabled amapp-api && echo 'Service is enabled' || echo 'Service is not enabled'
            netstat -tlnp | grep :2226 && echo 'Port 2226 is listening' || echo 'Port 2226 is not listening'
          "

      - name: Test endpoints locally
        run: |
          VM_HOST="vsgate-ssh.dei.isep.ipp.pt"
          VM_PORT="10833"
          VM_USER="root"
          
          echo "=== LOCAL ENDPOINT TESTS ==="
          ssh -p $VM_PORT $VM_USER@$VM_HOST "
            curl -f http://localhost:2226/health -m 10 && echo 'Health endpoint OK' || echo 'Health endpoint failed'
            curl -f http://localhost:2226/swagger -m 10 && echo 'Swagger endpoint OK' || echo 'Swagger endpoint failed'
          "

      - name: Test external access
        run: |
          echo "=== EXTERNAL ACCESS TESTS ==="
          sleep 10
          
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://vs-gate.dei.isep.ipp.pt:2226/health -m 30 || echo "000")
          echo "Health endpoint status: $HEALTH_STATUS"
          
          SWAGGER_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://vs-gate.dei.isep.ipp.pt:2226/swagger -m 30 || echo "000")
          echo "Swagger endpoint status: $SWAGGER_STATUS"
          
          if [ "$SWAGGER_STATUS" = "200" ]; then
            echo "SUCCESS: Swagger UI available at http://vs-gate.dei.isep.ipp.pt:2226/swagger"
          else
            echo "FAILED: External Swagger access failed"
          fi