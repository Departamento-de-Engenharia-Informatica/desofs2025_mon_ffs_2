name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Executa semanalmente aos domingos
  workflow_dispatch: # Permite execução manual do workflow

jobs:
  # Job 1: Análise de Código com CodeQL
  analyze:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./project/AMAPP.API

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Build
      run: |
        dotnet restore
        dotnet build --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: '/language:${{ matrix.language }}'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 2: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: amappdb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore
        
      - name: Run tests with coverage
        run: |
          # Find and run tests
          if [ -d "../AMAP.API.Tests" ]; then
            echo "Running tests from AMAP.API.Tests project..."
            dotnet test ../AMAP.API.Tests/AMAP.Tests.csproj --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
          elif [ -f "AMAPP.API.sln" ]; then
            echo "Running tests from solution..."
            dotnet test AMAPP.API.sln --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
          else
            echo "Running tests from current directory..."
            dotnet test --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
          fi
          
          # Smoke tests
          echo "Executando testes de smoke..."
          mkdir -p ./SmokeTestResults
          echo "Iniciando testes de smoke em $(date)" > ./SmokeTestResults/smoke-report.txt

          # Start API in background
          dotnet run --no-build --urls http://localhost:5000 &
          API_PID=$!
          echo "API PID is $API_PID"
          
          echo "Aguardando a API iniciar..."
          sleep 15

          # Test endpoints
          echo "Verificando endpoint de saúde..."
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/health || echo "000")
          echo "Status do endpoint /health: $HEALTH_STATUS" >> ./SmokeTestResults/smoke-report.txt
          
          echo "Verificando documentação Swagger..."
          SWAGGER_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/swagger/index.html || echo "000")
          echo "Status do endpoint /swagger: $SWAGGER_STATUS" >> ./SmokeTestResults/smoke-report.txt
          
          # Stop API
          kill $API_PID 2>/dev/null || true
          wait $API_PID 2>/dev/null || true
          
        env:
          ConnectionStrings__PostgreSQLConnection: "Host=localhost;Port=5432;Database=amappdb_test;Username=postgres;Password=postgres;"
        continue-on-error: true
        
      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.3.8
        with:
          reports: './project/AMAPP.API/TestResults/**/coverage.cobertura.xml'
          targetdir: './project/AMAPP.API/CoverageReport'
          reporttypes: 'HtmlInline;Cobertura;TextSummary'
        continue-on-error: true
      
      - name: Upload test results and coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-and-coverage
          path: |
            ./project/AMAPP.API/TestResults/
            ./project/AMAPP.API/CoverageReport/
            ./project/AMAPP.API/SmokeTestResults/
            
      - name: Publish for scanning
        run: |
          dotnet publish AMAPP.API.csproj \
            --configuration Release \
            --framework net8.0 \
            --output ./bin/Release/net8.0
  
      - name: Scan .NET build output with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scan-ref: './project/AMAPP.API/bin/Release/net8.0'
          format: template
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          scanners: 'vuln,secret,misconfig'
          severity: 'MEDIUM,HIGH,CRITICAL'
        continue-on-error: true
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'Trivy'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
 
  # Job 3: Verificação de Dependências (SCA)
  dependency-check:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: List vulnerable packages
      run: |
        echo "Checking for vulnerable NuGet packages..."
        dotnet list package --vulnerable --include-transitive > vulnerable-packages.txt || true
        cat vulnerable-packages.txt
      continue-on-error: true
    
    - name: Check for outdated packages
      run: |
        echo "Checking for outdated packages..."
        dotnet list package --outdated > outdated-packages.txt || true
        cat outdated-packages.txt
      continue-on-error: true
    
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'AMAPP.API'
        path: './project'
        format: 'HTML,JSON'
        out: 'dependency-check-reports'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
      continue-on-error: true
    
    - name: Generate SBOM
      run: |
        # Install CycloneDX tool if not already installed
        dotnet tool install --global CycloneDX.Tool || echo "CycloneDX tool already installed"
        
        # Generate SBOM
        dotnet CycloneDX ./AMAPP.API.csproj -o ./sbom.xml -f xml || echo "SBOM generation failed"
        
        # Check if SBOM was created
        if [ -f "./sbom.xml" ]; then
          echo "✅ SBOM generated successfully"
        else
          echo "⚠️ SBOM generation failed, creating placeholder"
          echo '<?xml version="1.0"?><bom></bom>' > ./sbom.xml
        fi
      continue-on-error: true

    - name: Normalize SBOM filename
      continue-on-error: true
      run: |
        PROJDIR="$GITHUB_WORKSPACE/project/AMAPP.API"
        mkdir -p "$PROJDIR"

        # Check if SBOM was generated in current directory
        if [[ -f "./sbom.xml" ]]; then
          mv "./sbom.xml" "$PROJDIR/sbom.xml"
          echo "✅ SBOM moved to project/AMAPP.API/sbom.xml"
        else
          echo "⚠️ SBOM not found; creating empty placeholder"
          echo '<?xml version="1.0"?><bom></bom>' > "$PROJDIR/sbom.xml"
        fi
        
    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          ./project/AMAPP.API/vulnerable-packages.txt
          ./project/AMAPP.API/outdated-packages.txt
          ./dependency-check-reports/
          ./project/AMAPP.API/sbom.xml

  # Job 4: Verificações de Qualidade de Código
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'    
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Check for exposed secrets
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      continue-on-error: true

  # Job 5: Deploy to vs833
  deploy:
    name: Deploy to vs833
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'pull_request' && github.base_ref == 'develop') ||
      (github.ref == 'refs/heads/develop' && github.event_name == 'push')
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          
      - name: Restore dependencies
        run: dotnet restore
        
      - name: Build
        run: dotnet build --configuration Release --no-restore
        
      - name: Publish
        run: dotnet publish AMAPP.API.csproj -c Release -o publish
        
      - name: Test SSH Connection and Resolve Host
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: vsgate-ssh.dei.isep.ipp.pt
          port: 10833
          username: ${{ secrets.DEPLOY_USER || 'root' }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            echo "✅ SSH connection successful to vs833 via gateway"
            echo "Current user: $(whoami)"
            echo "Current directory: $(pwd)"
            echo "Hostname: $(hostname)"
            echo "Disk usage:"
            df -h
        continue-on-error: false
        
      - name: Copy files via SSH
        run: |
          echo "Creating SSH config for vs833 via gateway..."
          mkdir -p ~/.ssh
          cat > ~/.ssh/config << EOF
          Host vs833-deploy
            HostName vsgate-ssh.dei.isep.ipp.pt
            Port 10833
            User ${{ secrets.DEPLOY_USER || 'root' }}
            ServerAliveInterval 60
            ServerAliveCountMax 3
            ConnectTimeout 30
            TCPKeepAlive yes
            StrictHostKeyChecking no
          EOF
          
          echo "Setting up SSH key..."
          echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          echo "Testing connection to vs833..."
          ssh -i ~/.ssh/deploy_key vs833-deploy "echo 'Connection test successful to vs833'; mkdir -p /tmp/amapp-deploy"
          
          echo "Copying files via rsync over SSH..."
          rsync -avz -e "ssh -i ~/.ssh/deploy_key -o ConnectTimeout=30" \
            ./project/AMAPP.API/publish/ \
            vs833-deploy:/tmp/amapp-deploy/
          
          echo "✅ Files copied successfully to vs833"
          
      - name: Deploy and restart application
        run: |
          echo "🚀 Starting AMAPP deployment via SSH gateway to vs833..."
          
          ssh -i ~/.ssh/deploy_key vs833-deploy << 'DEPLOY_SCRIPT'
            echo "🚀 Starting AMAPP deployment on vs833..."
            
            # Create application directory if it doesn't exist
            sudo mkdir -p /opt/amapp-api
            
            # Stop the service if it exists
            if systemctl list-units --full -all | grep -Fq "amapp-api.service"; then
              sudo systemctl stop amapp-api || echo "Service was not running"
            fi
            
            # Backup current deployment if it exists
            if [ -d "/opt/amapp-api" ] && [ "$(ls -A /opt/amapp-api 2>/dev/null)" ]; then
              sudo cp -r /opt/amapp-api /opt/amapp-api.backup.$(date +%Y%m%d_%H%M%S)
              echo "✅ Backup created"
            fi
            
            # Clear and copy new files
            sudo rm -rf /opt/amapp-api/*
            sudo cp -r /tmp/amapp-deploy/* /opt/amapp-api/
            
            # Set permissions
            sudo chown -R root:root /opt/amapp-api/
            sudo chmod +x /opt/amapp-api/AMAPP.API
            
            # Clean up temp files
            rm -rf /tmp/amapp-deploy
            
            # Create or update systemd service file
            sudo tee /etc/systemd/system/amapp-api.service > /dev/null << 'SERVICE_EOF'
          [Unit]
          Description=AMAPP API Application
          After=network.target
          
          [Service]
          Type=notify
          WorkingDirectory=/opt/amapp-api
          ExecStart=/opt/amapp-api/AMAPP.API --urls "https://0.0.0.0:7237"
          Restart=always
          RestartSec=10
          KillSignal=SIGINT
          SyslogIdentifier=amapp-api
          User=root
          Environment=ASPNETCORE_ENVIRONMENT=Production
          Environment=DOTNET_PRINT_TELEMETRY_MESSAGE=false
          
          [Install]
          WantedBy=multi-user.target
          SERVICE_EOF
            
            # Reload systemd and start service
            sudo systemctl daemon-reload
            sudo systemctl enable amapp-api
            sudo systemctl start amapp-api
            
            # Wait and check status
            sleep 15
            if sudo systemctl is-active --quiet amapp-api; then
              echo "✅ AMAPP service is running on vs833!"
              echo "🌐 Should be available at: https://vs-gate.dei.isep.ipp.pt:10833"
            else
              echo "❌ Service failed to start"
              sudo journalctl -u amapp-api --no-pager -n 50
              exit 1
            fi
            
            # Clean up old backups (keep last 3)
            sudo find /opt -name "amapp-api.backup.*" -type d 2>/dev/null | sort -r | tail -n +4 | sudo xargs rm -rf 2>/dev/null || true
            
            echo "🎉 Deployment completed successfully on vs833!"
          DEPLOY_SCRIPT

      - name: Health Check
        run: |
          echo "🏥 Testing application health..."
          sleep 30
          
          # Test external endpoints with retries
          for i in {1..5}; do
            echo "Health check attempt $i/5..."
            
            if curl -f -k -s --connect-timeout 10 --max-time 30 "https://vs-gate.dei.isep.ipp.pt:10833/swagger/index.html" > /dev/null; then
              echo "✅ Swagger is responding: https://vs-gate.dei.isep.ipp.pt:10833/swagger"
              break
            else
              echo "⚠️ Swagger endpoint check failed (attempt $i)"
              if [ $i -eq 5 ]; then
                echo "❌ All health check attempts failed"
              else
                sleep 10
              fi
            fi
          done
          
          echo "🌐 Application URLs:"
          echo "   - API: https://vs-gate.dei.isep.ipp.pt:10833"
          echo "   - Swagger: https://vs-gate.dei.isep.ipp.pt:10833/swagger"
        continue-on-error: true

  # Job 6: DAST with OWASP ZAP (only after successful deployment)
  dast-owasp-zap:
    name: OWASP ZAP Security Scan
    runs-on: ubuntu-latest
    needs: deploy
    if: |
      success() && (
        (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
        (github.event_name == 'pull_request' && github.base_ref == 'develop') ||
        (github.ref == 'refs/heads/develop' && github.event_name == 'push')
      )
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Wait for deployment to stabilize
        run: sleep 60
      
      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'https://vs-gate.dei.isep.ipp.pt:10833'
          fail_action: false
          allow_issue_writing: false
          cmd_options: '-config api.disablekey=true -config scanner.includelargeresponse=false -config connection.dnsTtlSuccessfulQueries=0 -config connection.timeoutInSecs=30 -config ssl.insecure=true'
        continue-on-error: true

      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-report
          path: report_html.html