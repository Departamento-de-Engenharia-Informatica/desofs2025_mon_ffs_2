name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Executa semanalmente aos domingos
  workflow_dispatch: # Permite execução manual do workflow

jobs:
  # Job 1: Análise de Código com CodeQL
  analyze:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./project/AMAPP.API

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]  # Adicione outros idiomas se necessário

    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # config-file: .github/codeql/codeql-config.yml

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Build
      run: |
        dotnet restore
        dotnet build --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: '/language:${{ matrix.language }}'
      #   output: codeql-results.sarif
      # env:
      #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 1: Análise de Código com CodeQL
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: amappdb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Run tests with coverage
        run: |
          # Verificar se existe projeto de testes
          if [ -f "AMAPP.API.Tests/AMAPP.API.Tests.csproj" ]; then
            echo "Running tests from AMAPP.API.Tests project..."
            dotnet test AMAPP.API.Tests/AMAPP.API.Tests.csproj --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
          elif [ -f "AMAP.API.Tests/AMAP.API.Tests.csproj" ]; then
            echo "Running tests from AMAP.API.Tests project..."
            dotnet test AMAP.API.Tests/AMAP.API.Tests.csproj --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
          elif [ -f "AMAPP.API.sln" ]; then
            echo "Running tests from solution..."
            dotnet test AMAPP.API.sln --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
          else
            echo "Running tests from main project (no separate test project found)..."
            dotnet test --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
          fi
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=amappdb_test;Username=postgres;Password=postgres;"
        continue-on-error: true
        
      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
        with:
          reports: './project/AMAPP.API/TestResults/**/coverage.cobertura.xml'
          targetdir: './project/AMAPP.API/CoverageReport'
          reporttypes: 'HtmlInline;Cobertura;TextSummary'
      
      - name: Upload test results and coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-and-coverage
          path: |
            ./project/AMAPP.API/TestResults/
            ./project/AMAPP.API/CoverageReport/

  # Job 3: Verificação de Dependências (SCA)
  dependency-check:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    defaults:
      run:
        working-directory: ./project/AMAPP.API
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: List vulnerable packages
      run: |
        echo "Checking for vulnerable NuGet packages..."
        dotnet list package --vulnerable --include-transitive > vulnerable-packages.txt
        cat vulnerable-packages.txt
      continue-on-error: true
    
    - name: Check for outdated packages
      run: |
        echo "Checking for outdated packages..."
        dotnet list package --outdated > outdated-packages.txt
        cat outdated-packages.txt
      continue-on-error: true
    
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'AMAPP.API'
        path: './project'
        format: 'HTML,JSON'
        out: 'dependency-check-reports'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
      continue-on-error: true
    
    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          ./project/AMAPP.API/vulnerable-packages.txt
          ./project/AMAPP.API/outdated-packages.txt
          ./dependency-check-reports/

  # Job 5: Verificações de Qualidade de Código
  # code-quality:
  #   name: Code Quality Analysis
  #   runs-on: ubuntu-latest
  #   needs: build-and-test
  #   defaults:
  #     run:
  #       working-directory: ./project/AMAPP.API
    
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4
    
  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v4
  #     with:
  #       dotnet-version: '8.0.x'
    
  #   - name: Restore dependencies
  #     run: dotnet restore
    
  #   - name: Security Code Analysis
  #     run: |
  #       echo "=== Security Code Analysis ==="
  #       mkdir -p code-quality-reports
        
  #       # Verificar padrões de injeção SQL
  #       echo "Checking for SQL injection patterns..." | tee code-quality-reports/security-patterns.txt
  #       grep -r --include="*.cs" "sql.*=.*\$\|SqlCommand.*+\|ExecuteRaw\|FromSqlRaw.*+" . >> code-quality-reports/security-patterns.txt || echo "No SQL injection patterns found" >> code-quality-reports/security-patterns.txt
        
  #       # Verificar algoritmos de criptografia fracos
  #       echo -e "\nChecking for weak cryptographic algorithms..." >> code-quality-reports/security-patterns.txt
  #       grep -r --include="*.cs" "MD5\|SHA1\|DES\|ECB" . >> code-quality-reports/security-patterns.txt || echo "No weak crypto algorithms found" >> code-quality-reports/security-patterns.txt
        
  #       # Verificar validação de entrada
  #       echo -e "\nChecking for unvalidated inputs..." >> code-quality-reports/security-patterns.txt
  #       grep -r --include="*.cs" "Request\.Form\|Request\.QueryString\|Request\.Params" . >> code-quality-reports/security-patterns.txt || echo "No unvalidated inputs found" >> code-quality-reports/security-patterns.txt
        
  #       # Verificar autenticação e autorização
  #       echo -e "\nChecking for authentication patterns..." >> code-quality-reports/security-patterns.txt
  #       grep -r --include="*.cs" "Authorize\|AllowAnonymous\|Identity" . >> code-quality-reports/security-patterns.txt || echo "No auth patterns found" >> code-quality-reports/security-patterns.txt
        
  #       cat code-quality-reports/security-patterns.txt
  #     continue-on-error: true
    
  #   - name: Database Security Analysis
  #     run: |
  #       echo "=== Database Security Analysis ==="
        
  #       # Verificar migrations por dados sensíveis
  #       echo "Checking migrations for sensitive data..." >> code-quality-reports/database-security.txt
  #       find . -path "*/Migrations/*.cs" -exec grep -l "password\|secret\|token\|key" {} \; >> code-quality-reports/database-security.txt || echo "No sensitive data in migrations" >> code-quality-reports/database-security.txt
        
  #       # Verificar configurações de Entity Framework
  #       echo -e "\nChecking Entity Framework configurations..." >> code-quality-reports/database-security.txt
  #       grep -r --include="*.cs" "OnDelete.*Cascade\|DeleteBehavior" . >> code-quality-reports/database-security.txt || echo "No cascade delete patterns found" >> code-quality-reports/database-security.txt
        
  #       cat code-quality-reports/database-security.txt
  #     continue-on-error: true
    
  #   - name: Upload code quality reports
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: code-quality-reports
  #       path: ./project/AMAPP.API/code-quality-reports/     


  # Job 6: Build de Container Docker (opcional)
  # docker-build:
  #   name: Docker Build and Security Scan
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'  # Só executa na branch main
  #   needs: [build-and-test, dependency-check]
    
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4
    
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3
    
  #   - name: Build Docker image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       file: ./project/Dockerfile
  #       push: false
  #       tags: amapp-api:latest
  #       load: true
    
  #   - name: Run Trivy vulnerability scanner
  #     uses: aquasecurity/trivy-action@master
  #     with:
  #       image-ref: 'amapp-api:latest'
  #       format: 'sarif'
  #       output: 'trivy-results.sarif'
  #     continue-on-error: true
    
  #   - name: Upload Trivy scan results
  #     uses: github/codeql-action/upload-sarif@v3
  #     if: always()
  #     with:
  #       sarif_file: 'trivy-results.sarif'
  #       category: 'trivy-container-scan'
  #     continue-on-error: true


  # Job 7: Resumo de Segurança
  # security-summary:
  #   name: Security Summary
  #   runs-on: ubuntu-latest
  #   needs: [analyze, dependency-check, secrets-scan, code-quality]
  #   if: always()
    
  #   steps:
  #   - name: Download all artifacts
  #     uses: actions/download-artifact@v4
    
  #   - name: Generate Security Summary
  #     run: |
  #       echo "# Security Scan Summary" > security-summary.md
  #       echo "Generated on: $(date)" >> security-summary.md
  #       echo "" >> security-summary.md
        
  #       echo "## Jobs Status:" >> security-summary.md
  #       echo "- CodeQL Analysis: ${{ needs.analyze.result }}" >> security-summary.md
  #       echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> security-summary.md
  #       echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-summary.md
  #       echo "- Code Quality: ${{ needs.code-quality.result }}" >> security-summary.md
  #       echo "" >> security-summary.md
        
  #       echo "## Artifacts Generated:" >> security-summary.md
  #       ls -la >> security-summary.md
        
  #       cat security-summary.md
    
  #   - name: Upload Security Summary
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: security-summary
  #       path: security-summary.md