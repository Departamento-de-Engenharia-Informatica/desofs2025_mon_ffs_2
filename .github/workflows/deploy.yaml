name: Deploy Self-Contained

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Build Self-Contained
      run: |
        cd ./project/AMAPP.API
        echo "üî® Building self-contained deployment..."
        
        # Self-contained para Linux x64 (inclui TODAS as depend√™ncias)
        dotnet publish -c Release \
          --self-contained true \
          --runtime linux-x64 \
          -o ./app-self-contained
        
        echo "üì¶ Arquivos gerados:"
        ls -la ./app-self-contained/ | head -10
        
        echo "üìè Tamanho total:"
        du -sh ./app-self-contained/

    - name: Clean and prepare
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        port: ${{ secrets.SSH_PORT }}
        command_timeout: 10s
        script: |
          echo "üßπ Preparando diret√≥rio..."
          mkdir -p ~/amapp-self-contained
          rm -rf ~/amapp-self-contained/*

    - name: Copy self-contained files
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        port: ${{ secrets.SSH_PORT }}
        source: "./project/AMAPP.API/app-self-contained/*"
        target: "~/amapp-self-contained/"
        strip_components: 1

    - name: Start self-contained API
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        port: ${{ secrets.SSH_PORT }}
        command_timeout: 20s
        script: |
          cd ~/amapp-self-contained
          
          echo "üìç Local: $(pwd)"
          echo "üìã Arquivos principais:"
          ls -la AMAPP.API* *.dll | head -5
          
          echo "üõë Parando processos antigos..."
          pkill -f "AMAPP.API" 2>/dev/null || echo "OK"
          
          echo "üîß Configurando permiss√µes..."
          chmod +x AMAPP.API
          
          echo "üöÄ Iniciando API self-contained..."
          export ASPNETCORE_URLS="http://localhost:2226"
          
          # Executar o bin√°rio diretamente (n√£o precisa de 'dotnet')
          nohup ./AMAPP.API > api.log 2>&1 &
          
          echo "‚è≥ Aguardando inicializa√ß√£o..."
          sleep 5
          
          echo "üîç Verificando se est√° rodando..."
          if ps aux | grep -v grep | grep "AMAPP.API"; then
            echo "‚úÖ API rodando com sucesso!"
            echo "üìä Processo:"
            ps aux | grep -v grep | grep "AMAPP.API"
          else
            echo "‚ùå API n√£o iniciou. Verificando log:"
            tail -10 api.log
          fi
          
          echo "ü©∫ Testando conex√£o..."
          curl -f http://localhost:2226/health || curl -f http://localhost:2226 || echo "API pode estar carregando..."