name: CI Pipeline Alt

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Executa semanalmente aos domingos

jobs:
  analyze:
    name: Analyze Code (CodeQL)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./project/AMAPP.API

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build
        run: |
          dotnet restore
          dotnet build --no-restore

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: '/language:${{ matrix.language }}'

  build-and-test:
    name: Build, Test & Security Scans (with SBOM, IAST, Container Scan)
    runs-on: ubuntu-latest
    needs: analyze
    defaults:
      run:
        working-directory: ./project/AMAPP.API

    env:
      # Contrast IAST agent config — put these in your repo secrets
      CONTRAST__AGENT__API_KEY: ${{ secrets.CONTRAST_API_KEY }}
      CONTRAST__AGENT__SERVICE_KEY: ${{ secrets.CONTRAST_SERVICE_KEY }}
      CONTRAST__AGENT__URL: https://app.contrastsecurity.com/Contrast
      CORECLR_ENABLE_PROFILING: '1'
      CORECLR_PROFILER: '{e8c5c2c0-XXXX-XXXX-XXXX-XXXXXXXXXXXX}'

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: amappdb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # ─── Setup & Build ────────────────────────────────────────────────────────────
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore & Build
        run: |
          dotnet restore
          dotnet build --no-restore

      # ─── IAST Agent Installation & Configuration ────────────────────────────────
      - name: Install Contrast CLI
        run: dotnet tool install --global Contrast.CLI --version 5.*

      - name: Download Contrast .NET Agent
        run: |
          curl -sL -o contrast-agent.zip \
            https://repo1.maven.org/maven2/com/contrastsecurity/contrast-agent/2.9.0/contrast-agent-2.9.0.zip
          unzip contrast-agent.zip -d contrast-agent

      - name: Configure Profiler Path
        run: echo "CORECLR_PROFILER_PATH=$(pwd)/contrast-agent/netcoreapp3.1/Profiler.so" >> $GITHUB_ENV

      # ─── Test with Coverage & IAST ───────────────────────────────────────────────
      - name: Run Tests & Collect Coverage
        run: |
          dotnet test --configuration Release \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults

      - name: Upload Contrast IAST Report
        uses: actions/upload-artifact@v3
        with:
          name: contrast-iast-report
          path: contrast-agent/reports/*.json

      # ─── SBOM Generation ─────────────────────────────────────────────────────────
      - name: Install CycloneDX .NET tool
        run: dotnet tool install --global CycloneDX

      - name: Generate SBOM
        run: cyclonedx convert --output sbom.xml

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.xml

      # ─── Container Build & Image Scanning ────────────────────────────────────────
      - name: Build Docker Image
        run: docker build -t amapp-api:${{ github.sha }} .

      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: amapp-api:${{ github.sha }}

  dependency-check:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    defaults:
      run:
        working-directory: ./project/AMAPP.API

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: List vulnerable packages
        run: |
          echo "Checking for vulnerable NuGet packages..."
          dotnet list package --vulnerable --include-transitive > vulnerable-packages.txt
          cat vulnerable-packages.txt
        continue-on-error: true

      - name: Check for outdated packages
        run: |
          echo "Checking for outdated packages..."
          dotnet list package --outdated > outdated-packages.txt
          cat outdated-packages.txt
        continue-on-error: true

      # ─── (Optional) OWASP Dependency-Check for deeper SCA  ──────────────────────
      - name: Run OWASP Dependency-Check
        uses: dependency-check-action@v2
        with:
          project: AMAPP.API
          scanPath: './**/*.csproj'
        continue-on-error: true

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            vulnerable-packages.txt
            outdated-packages.txt
            dependency-check-report.html